#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 17 16:35:31 2018

@author: andreaandone
"""

# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

#importpackages
import math
import numpy as np
import numpy.random as random

#step 1turn import into scientific notation
def sci(x):
    S_SN = x
    #step1 turn S into scientific notation
    n = 0
    while (S_SN>100):
        S_SN *= 1/10
        n += 1
    n = int(n//2)
    #print(n, S_SN)
    return n, S_SN

#step2 initial seed value
def seed(x):
    n, a = sci(x)
    #print(n,a)
    y = 1
    for i in range(n):
        y *= 10
    if a < 10:
        y *= 2
    else:
        y *= 6
    #print(y)
    return y

#step3 sqaure root algorithms
def square(x):
    squareResult = float(seed(x))
    e = 0.000000001
    while (abs(squareResult*squareResult-x) > e):
        squareResult += x/squareResult
        squareResult *= .5
        #print(squareResult)
    return squareResult

#step4 menwhile find mean
def findMean(x):
    Xsum = 0
    for i in range(len(x)):
        Xsum += x[i]
    Xmean = Xsum / float(len(x))
    return Xmean

#step 5 
def nem(x,y):
    
    #product = 1
    #list = []    
    c = np.zeros((x.shape[1],y.shape[1]),dtype = np.float32)    
    for colx in range(x.shape[1]):
        Xmean = findMean(x[:,colx])
        for coly in range(y.shape[1]):
                Ymean = findMean(y[:,coly])
        productSum = 0
        for row in range(x.shape[0]):
                productSum += (x[row,colx]-Xmean[colx]) * (y[row,coly]-Ymean[coly])
        c[colx,coly] = productSum   
        #print(2)
    return c
	
def dem(x,y):
    Xmean,Ymean = findMean(x,y)
    XSS = np.zeros((x.shape[1],1),dtype=np.float32)
    for col in range(x.shape[1]):
            Xmean = findMean(x[col])
            for row in x.shape[0]:
                    XSS[row,0] += (x[row,col]-Xmean[col]) * (x[row,col]-Xmean[col])
            YSS = np.zeros((1,x.shape[1]),dtype=np.float32)
            for col in range(y.shape[1]):
                    Ymean = findMean(y[col])
                    for row in range(y.shape[0]):
                            YSS[0,col] += (y[row,col]-Ymean[col]) * (y[row,col]-Ymean[row])
            c = np.matmul(XSS,YSS)
            for row in c.shape[0]:
                    for col in c.shape[1]:
                            c[row,col] = square(c[row,col])
            return c


def calc(x,y):
	#print("test")
	productSum = nem(x,y)
	squareProduct = dem(x,y)
	r = productSum / squareProduct #upper is a summation and lower is square root
	#print(productSum, squareProduct)
	#print(4)
	print(r)
	return r

def nem_pc(XY, XZ, ZY):
  nem_pcResult = XY - (XZ * ZY)
  return nem_pcResult

def dem_pc(XZ, ZY):
    XZ = square(1 - XZ * XZ)
    ZY = square(1 - ZY * ZY)
    dem_pcResult = XZ * ZY
    return dem_pcResult

x = np.random.rand(10,100)
y = np.random.rand(10,100)
z = np.random.rand(10,100)
n = 10

XY = calc(x,y)
XZ = calc(x,z)
ZY = calc(z,y)

print(nem_pc(XY, XZ, ZY)//dem_pc(XZ, ZY))
