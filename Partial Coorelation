import math
import numpy as np
import numpy.random as random
from scipy.stats.stats import pearsonr
def findMean(x):
	Xsum = 0
	for i in range(len(x)):
		Xsum += x[i]
	Xmean = Xsum / float(len(x))
	print(1)
	return Xmean
def nem(x,y):
	product = 1
	list = []
	#productSum = 0
	#if n <=0 or len(x) <=0 or len(y) <=0: 
		#return "error"
        c = np.zeros((x.shape[1],y.shape[1]),dtype = np.float32)
	for colx in range(x.shape[1]):
          Xmean = findMean(x[:,colx])
          for coly in range(y.shape[1]):
            Ymean = findMean(y[:,coly])
            productSum = 0
            for row in range(x.shape[0]):
		  productSum += (x[i,j]-Xmean[j]) * (y[i,j]-Ymean[j])
            c[colx,coly] = productSum   
        print(2)
	return c
	
def dem(x,y):
	Xmean,Ymean = findMean(x,y)
	XSS = np.zeros((x.shape[1],1),dtype=np.float32)
	for col in range(x.shape[1]):
          Xmean = findMean(x[col]) 
          for row in x.shape[0]):
                XSS[j,0] += (x[row,j]-Xmean[j]) * (x[row,j]-Xmean[j])
	YSS = np.zeros((1,x.shape[1]),dtype=np.float32)
	for col in range(y.shape[1]):
          Ymean = findMean(y[col])
		for row in range(y.shape[0]):
		  YSS[0,col] += (y[row,col]-Ymean[col]) * (y[row,cal]-Ymean[row])
	c = np.matmul(XSS,YSS)
	for row in c.shape[0]:
          for col in c.shape[1]:
                  c[row,col] = sqrt(c[row,col])
        return c
def calc(x,y,n):
	#print("test")
	productSum = nem(x,y,n)
	squareProduct = dem(x,y,n)
	r = productSum / squareProduct #upper is a summation and lower is square root
	#print(productSum, squareProduct)
	print(4)
	print(r)
	return r
x = np.random.rand(10,100)
y = np.random.rand(10,100)
n = 10
#print(nem(x,y,n),dem(x,y,n))
#print(findMean(x,y))
print(z)
print(calc(x,y,n))
